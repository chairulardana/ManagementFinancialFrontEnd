/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@/config/axiosClient.ts'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@/config/axiosClient.ts'
import type { GetApiSetoranListQueryResponse, GetApiSetoranListQueryParams } from '../../types/SetoranController/GetApiSetoranList.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const getApiSetoranListInfiniteQueryKey = (params?: GetApiSetoranListQueryParams) => [{ url: '/api/Setoran/list' }, ...(params ? [params] : [])] as const

export type GetApiSetoranListInfiniteQueryKey = ReturnType<typeof getApiSetoranListInfiniteQueryKey>

/**
 * {@link /api/Setoran/list}
 */
export async function getApiSetoranListInfinite(params?: GetApiSetoranListQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetApiSetoranListQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/api/Setoran/list`,
    params,
    ...requestConfig,
  })
  return res
}

export function getApiSetoranListInfiniteQueryOptions(params?: GetApiSetoranListQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getApiSetoranListInfiniteQueryKey(params)
  return infiniteQueryOptions<
    ResponseConfig<GetApiSetoranListQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<GetApiSetoranListQueryResponse>,
    typeof queryKey,
    number
  >({
    queryKey,
    queryFn: async ({ signal, pageParam }) => {
      config.signal = signal

      if (params) {
        params['next_page'] = pageParam as unknown as GetApiSetoranListQueryParams['next_page']
      }
      return getApiSetoranListInfinite(params, config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['nextCursor'],
    getPreviousPageParam: (firstPage) => firstPage['nextCursor'],
  })
}

/**
 * {@link /api/Setoran/list}
 */
export function useGetApiSetoranListInfinite<
  TData = InfiniteData<ResponseConfig<GetApiSetoranListQueryResponse>>,
  TQueryData = ResponseConfig<GetApiSetoranListQueryResponse>,
  TQueryKey extends QueryKey = GetApiSetoranListInfiniteQueryKey,
>(
  params?: GetApiSetoranListQueryParams,
  options: {
    query?: Partial<InfiniteQueryObserverOptions<ResponseConfig<GetApiSetoranListQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getApiSetoranListInfiniteQueryKey(params)

  const query = useInfiniteQuery(
    {
      ...(getApiSetoranListInfiniteQueryOptions(params, config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}