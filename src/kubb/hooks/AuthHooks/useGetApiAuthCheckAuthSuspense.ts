/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type { GetApiAuthCheckAuthQueryResponse } from '../../types/AuthController/GetApiAuthCheckAuth.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getApiAuthCheckAuthSuspenseQueryKey = () => [{ url: '/api/auth/check-auth' }] as const

export type GetApiAuthCheckAuthSuspenseQueryKey = ReturnType<typeof getApiAuthCheckAuthSuspenseQueryKey>

/**
 * {@link /api/auth/check-auth}
 */
export async function getApiAuthCheckAuthSuspense(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetApiAuthCheckAuthQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/api/auth/check-auth`,
    ...requestConfig,
  })
  return res
}

export function getApiAuthCheckAuthSuspenseQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getApiAuthCheckAuthSuspenseQueryKey()
  return queryOptions<
    ResponseConfig<GetApiAuthCheckAuthQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<GetApiAuthCheckAuthQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getApiAuthCheckAuthSuspense(config)
    },
  })
}

/**
 * {@link /api/auth/check-auth}
 */
export function useGetApiAuthCheckAuthSuspense<
  TData = ResponseConfig<GetApiAuthCheckAuthQueryResponse>,
  TQueryKey extends QueryKey = GetApiAuthCheckAuthSuspenseQueryKey,
>(
  options: {
    query?: Partial<UseSuspenseQueryOptions<ResponseConfig<GetApiAuthCheckAuthQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getApiAuthCheckAuthSuspenseQueryKey()

  const query = useSuspenseQuery(
    {
      ...(getApiAuthCheckAuthSuspenseQueryOptions(config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}