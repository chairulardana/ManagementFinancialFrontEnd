/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@/config/axiosClient.ts'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@/config/axiosClient.ts'
import type { GetApiKategoripengeluaranQueryResponse } from '../../types/KategoriPengeluaranController/GetApiKategoripengeluaran.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getApiKategoripengeluaranQueryKey = () => [{ url: '/api/KategoriPengeluaran' }] as const

export type GetApiKategoripengeluaranQueryKey = ReturnType<typeof getApiKategoripengeluaranQueryKey>

/**
 * {@link /api/KategoriPengeluaran}
 */
export async function getApiKategoripengeluaran(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetApiKategoripengeluaranQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/api/KategoriPengeluaran`,
    ...requestConfig,
  })
  return res
}

export function getApiKategoripengeluaranQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getApiKategoripengeluaranQueryKey()
  return queryOptions<
    ResponseConfig<GetApiKategoripengeluaranQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<GetApiKategoripengeluaranQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getApiKategoripengeluaran(config)
    },
  })
}

/**
 * {@link /api/KategoriPengeluaran}
 */
export function useGetApiKategoripengeluaran<
  TData = ResponseConfig<GetApiKategoripengeluaranQueryResponse>,
  TQueryData = ResponseConfig<GetApiKategoripengeluaranQueryResponse>,
  TQueryKey extends QueryKey = GetApiKategoripengeluaranQueryKey,
>(
  options: {
    query?: Partial<QueryObserverOptions<ResponseConfig<GetApiKategoripengeluaranQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getApiKategoripengeluaranQueryKey()

  const query = useQuery(
    {
      ...(getApiKategoripengeluaranQueryOptions(config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}