/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@/config/axiosClient.ts'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@/config/axiosClient.ts'
import type { GetApiTargettabunganIdQueryResponse, GetApiTargettabunganIdPathParams } from '../../types/TargetTabunganController/GetApiTargettabunganId.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const getApiTargettabunganIdInfiniteQueryKey = (id: GetApiTargettabunganIdPathParams['id']) =>
  [{ url: '/api/TargetTabungan/:id', params: { id: id } }] as const

export type GetApiTargettabunganIdInfiniteQueryKey = ReturnType<typeof getApiTargettabunganIdInfiniteQueryKey>

/**
 * {@link /api/TargetTabungan/:id}
 */
export async function getApiTargettabunganIdInfinite(
  id: GetApiTargettabunganIdPathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetApiTargettabunganIdQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/api/TargetTabungan/${id}`,
    ...requestConfig,
  })
  return res
}

export function getApiTargettabunganIdInfiniteQueryOptions(
  id: GetApiTargettabunganIdPathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getApiTargettabunganIdInfiniteQueryKey(id)
  return infiniteQueryOptions<
    ResponseConfig<GetApiTargettabunganIdQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<GetApiTargettabunganIdQueryResponse>,
    typeof queryKey
  >({
    enabled: !!id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getApiTargettabunganIdInfinite(id, config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['nextCursor'],
    getPreviousPageParam: (firstPage) => firstPage['nextCursor'],
  })
}

/**
 * {@link /api/TargetTabungan/:id}
 */
export function useGetApiTargettabunganIdInfinite<
  TData = InfiniteData<ResponseConfig<GetApiTargettabunganIdQueryResponse>>,
  TQueryData = ResponseConfig<GetApiTargettabunganIdQueryResponse>,
  TQueryKey extends QueryKey = GetApiTargettabunganIdInfiniteQueryKey,
>(
  id: GetApiTargettabunganIdPathParams['id'],
  options: {
    query?: Partial<InfiniteQueryObserverOptions<ResponseConfig<GetApiTargettabunganIdQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getApiTargettabunganIdInfiniteQueryKey(id)

  const query = useInfiniteQuery(
    {
      ...(getApiTargettabunganIdInfiniteQueryOptions(id, config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}