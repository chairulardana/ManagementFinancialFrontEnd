/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@/config/axiosClient.ts'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '@/config/axiosClient.ts'
import type {
  DeleteApiTargettabunganResettargetIdtargettabunganMutationResponse,
  DeleteApiTargettabunganResettargetIdtargettabunganPathParams,
} from '../../types/TargetTabunganController/DeleteApiTargettabunganResettargetIdtargettabungan.ts'
import { useMutation } from '@tanstack/react-query'

export const deleteApiTargettabunganResettargetIdtargettabunganMutationKey = () => [{ url: '/api/TargetTabungan/ResetTarget/{idTargetTabungan}' }] as const

export type DeleteApiTargettabunganResettargetIdtargettabunganMutationKey = ReturnType<typeof deleteApiTargettabunganResettargetIdtargettabunganMutationKey>

/**
 * {@link /api/TargetTabungan/ResetTarget/:idTargetTabungan}
 */
export async function deleteApiTargettabunganResettargetIdtargettabungan(
  idTargetTabungan: DeleteApiTargettabunganResettargetIdtargettabunganPathParams['idTargetTabungan'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<DeleteApiTargettabunganResettargetIdtargettabunganMutationResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'DELETE',
    url: `/api/TargetTabungan/ResetTarget/${idTargetTabungan}`,
    ...requestConfig,
  })
  return res
}

/**
 * {@link /api/TargetTabungan/ResetTarget/:idTargetTabungan}
 */
export function useDeleteApiTargettabunganResettargetIdtargettabungan<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<DeleteApiTargettabunganResettargetIdtargettabunganMutationResponse>,
      ResponseErrorConfig<Error>,
      { idTargetTabungan: DeleteApiTargettabunganResettargetIdtargettabunganPathParams['idTargetTabungan'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? deleteApiTargettabunganResettargetIdtargettabunganMutationKey()

  return useMutation<
    ResponseConfig<DeleteApiTargettabunganResettargetIdtargettabunganMutationResponse>,
    ResponseErrorConfig<Error>,
    { idTargetTabungan: DeleteApiTargettabunganResettargetIdtargettabunganPathParams['idTargetTabungan'] },
    TContext
  >(
    {
      mutationFn: async ({ idTargetTabungan }) => {
        return deleteApiTargettabunganResettargetIdtargettabungan(idTargetTabungan, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}