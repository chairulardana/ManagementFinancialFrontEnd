/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@/config/axiosClient.ts'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '@/config/axiosClient.ts'
import type { PostApiTargettabunganMutationResponse } from '../../types/TargetTabunganController/PostApiTargettabungan.ts'
import { useMutation } from '@tanstack/react-query'

export const postApiTargettabunganMutationKey = () => [{ url: '/api/TargetTabungan' }] as const

export type PostApiTargettabunganMutationKey = ReturnType<typeof postApiTargettabunganMutationKey>

/**
 * {@link /api/TargetTabungan}
 */
export async function postApiTargettabungan(
  data: Record<string, unknown>, // ✅ Tambahkan parameter data
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const { client: request = client, ...requestConfig } = config;

  const formData = new FormData();
  if (data) {
    Object.keys(data).forEach((key) => {
      const value = data[key as keyof typeof data];
      if (value !== null && value !== undefined) {
        formData.append(key, value as unknown as string | Blob);
      }
    });
  }

  const res = await request<PostApiTargettabunganMutationResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'POST',
    url: `/api/TargetTabungan`,
    ...requestConfig,
    data: formData,
    headers: { 'Content-Type': 'multipart/form-data', ...requestConfig.headers },
  });
  return res;
}

/**
 * {@link /api/TargetTabungan}
 */
export function usePostApiTargettabungan<TContext>(
  options: {
    mutation?: UseMutationOptions<ResponseConfig<PostApiTargettabunganMutationResponse>, ResponseErrorConfig<Error>, Record<string, unknown>, TContext> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {};
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? postApiTargettabunganMutationKey();

  return useMutation<ResponseConfig<PostApiTargettabunganMutationResponse>, ResponseErrorConfig<Error>, Record<string, unknown>, TContext>(
    {
      mutationFn: async (data) => { // ✅ Terima data
        return postApiTargettabungan(data, config);
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  );
}