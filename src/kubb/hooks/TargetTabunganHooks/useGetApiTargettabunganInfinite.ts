/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@/config/axiosClient.ts'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@/config/axiosClient.ts'
import type { GetApiTargettabunganQueryResponse } from '../../types/TargetTabunganController/GetApiTargettabungan.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const getApiTargettabunganInfiniteQueryKey = () => [{ url: '/api/TargetTabungan' }] as const

export type GetApiTargettabunganInfiniteQueryKey = ReturnType<typeof getApiTargettabunganInfiniteQueryKey>

/**
 * {@link /api/TargetTabungan}
 */
export async function getApiTargettabunganInfinite(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetApiTargettabunganQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/api/TargetTabungan`,
    ...requestConfig,
  })
  return res
}

export function getApiTargettabunganInfiniteQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getApiTargettabunganInfiniteQueryKey()
  return infiniteQueryOptions<
    ResponseConfig<GetApiTargettabunganQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<GetApiTargettabunganQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getApiTargettabunganInfinite(config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['nextCursor'],
    getPreviousPageParam: (firstPage) => firstPage['nextCursor'],
  })
}

/**
 * {@link /api/TargetTabungan}
 */
export function useGetApiTargettabunganInfinite<
  TData = InfiniteData<ResponseConfig<GetApiTargettabunganQueryResponse>>,
  TQueryData = ResponseConfig<GetApiTargettabunganQueryResponse>,
  TQueryKey extends QueryKey = GetApiTargettabunganInfiniteQueryKey,
>(
  options: {
    query?: Partial<InfiniteQueryObserverOptions<ResponseConfig<GetApiTargettabunganQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getApiTargettabunganInfiniteQueryKey()

  const query = useInfiniteQuery(
    {
      ...(getApiTargettabunganInfiniteQueryOptions(config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}