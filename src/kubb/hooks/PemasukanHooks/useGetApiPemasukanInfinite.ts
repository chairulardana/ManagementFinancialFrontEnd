/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@/config/axiosClient.ts'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@/config/axiosClient.ts'
import type { GetApiPemasukanQueryResponse } from '../../types/PemasukanController/GetApiPemasukan.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const getApiPemasukanInfiniteQueryKey = () => [{ url: '/api/Pemasukan' }] as const

export type GetApiPemasukanInfiniteQueryKey = ReturnType<typeof getApiPemasukanInfiniteQueryKey>

/**
 * {@link /api/Pemasukan}
 */
export async function getApiPemasukanInfinite(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetApiPemasukanQueryResponse, ResponseErrorConfig<Error>, unknown>({ method: 'GET', url: `/api/Pemasukan`, ...requestConfig })
  return res
}

export function getApiPemasukanInfiniteQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getApiPemasukanInfiniteQueryKey()
  return infiniteQueryOptions<
    ResponseConfig<GetApiPemasukanQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<GetApiPemasukanQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getApiPemasukanInfinite(config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['nextCursor'],
    getPreviousPageParam: (firstPage) => firstPage['nextCursor'],
  })
}

/**
 * {@link /api/Pemasukan}
 */
export function useGetApiPemasukanInfinite<
  TData = InfiniteData<ResponseConfig<GetApiPemasukanQueryResponse>>,
  TQueryData = ResponseConfig<GetApiPemasukanQueryResponse>,
  TQueryKey extends QueryKey = GetApiPemasukanInfiniteQueryKey,
>(
  options: {
    query?: Partial<InfiniteQueryObserverOptions<ResponseConfig<GetApiPemasukanQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getApiPemasukanInfiniteQueryKey()

  const query = useInfiniteQuery(
    {
      ...(getApiPemasukanInfiniteQueryOptions(config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}