/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@/config/axiosClient.ts'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@/config/axiosClient.ts'
import type {
  GetApiPemasukanTotalPemasukanPerTahunQueryResponse,
  GetApiPemasukanTotalPemasukanPerTahunQueryParams,
} from '../../types/PemasukanController/GetApiPemasukanTotalPemasukanPerTahun.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const getApiPemasukanTotalPemasukanPerTahunInfiniteQueryKey = (params?: GetApiPemasukanTotalPemasukanPerTahunQueryParams) =>
  [{ url: '/api/Pemasukan/total-pemasukan-per-tahun' }, ...(params ? [params] : [])] as const

export type GetApiPemasukanTotalPemasukanPerTahunInfiniteQueryKey = ReturnType<typeof getApiPemasukanTotalPemasukanPerTahunInfiniteQueryKey>

/**
 * {@link /api/Pemasukan/total-pemasukan-per-tahun}
 */
export async function getApiPemasukanTotalPemasukanPerTahunInfinite(
  params?: GetApiPemasukanTotalPemasukanPerTahunQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetApiPemasukanTotalPemasukanPerTahunQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/api/Pemasukan/total-pemasukan-per-tahun`,
    params,
    ...requestConfig,
  })
  return res
}

export function getApiPemasukanTotalPemasukanPerTahunInfiniteQueryOptions(
  params?: GetApiPemasukanTotalPemasukanPerTahunQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getApiPemasukanTotalPemasukanPerTahunInfiniteQueryKey(params)
  return infiniteQueryOptions<
    ResponseConfig<GetApiPemasukanTotalPemasukanPerTahunQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<GetApiPemasukanTotalPemasukanPerTahunQueryResponse>,
    typeof queryKey,
    number
  >({
    queryKey,
    queryFn: async ({ signal, pageParam }) => {
      config.signal = signal

      if (params) {
        params['next_page'] = pageParam as unknown as GetApiPemasukanTotalPemasukanPerTahunQueryParams['next_page']
      }
      return getApiPemasukanTotalPemasukanPerTahunInfinite(params, config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['nextCursor'],
    getPreviousPageParam: (firstPage) => firstPage['nextCursor'],
  })
}

/**
 * {@link /api/Pemasukan/total-pemasukan-per-tahun}
 */
export function useGetApiPemasukanTotalPemasukanPerTahunInfinite<
  TData = InfiniteData<ResponseConfig<GetApiPemasukanTotalPemasukanPerTahunQueryResponse>>,
  TQueryData = ResponseConfig<GetApiPemasukanTotalPemasukanPerTahunQueryResponse>,
  TQueryKey extends QueryKey = GetApiPemasukanTotalPemasukanPerTahunInfiniteQueryKey,
>(
  params?: GetApiPemasukanTotalPemasukanPerTahunQueryParams,
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<ResponseConfig<GetApiPemasukanTotalPemasukanPerTahunQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryKey>
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getApiPemasukanTotalPemasukanPerTahunInfiniteQueryKey(params)

  const query = useInfiniteQuery(
    {
      ...(getApiPemasukanTotalPemasukanPerTahunInfiniteQueryOptions(params, config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}