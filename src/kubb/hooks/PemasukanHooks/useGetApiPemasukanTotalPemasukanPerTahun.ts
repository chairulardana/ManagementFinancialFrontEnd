/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@/config/axiosClient.ts'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@/config/axiosClient.ts'
import type {
  GetApiPemasukanTotalPemasukanPerTahunQueryResponse,
  GetApiPemasukanTotalPemasukanPerTahunQueryParams,
} from '../../types/PemasukanController/GetApiPemasukanTotalPemasukanPerTahun.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getApiPemasukanTotalPemasukanPerTahunQueryKey = (params?: GetApiPemasukanTotalPemasukanPerTahunQueryParams) =>
  [{ url: '/api/Pemasukan/total-pemasukan-per-tahun' }, ...(params ? [params] : [])] as const

export type GetApiPemasukanTotalPemasukanPerTahunQueryKey = ReturnType<typeof getApiPemasukanTotalPemasukanPerTahunQueryKey>

/**
 * {@link /api/Pemasukan/total-pemasukan-per-tahun}
 */
export async function getApiPemasukanTotalPemasukanPerTahun(
  params?: GetApiPemasukanTotalPemasukanPerTahunQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetApiPemasukanTotalPemasukanPerTahunQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/api/Pemasukan/total-pemasukan-per-tahun`,
    params,
    ...requestConfig,
  })
  return res
}

export function getApiPemasukanTotalPemasukanPerTahunQueryOptions(
  params?: GetApiPemasukanTotalPemasukanPerTahunQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getApiPemasukanTotalPemasukanPerTahunQueryKey(params)
  return queryOptions<
    ResponseConfig<GetApiPemasukanTotalPemasukanPerTahunQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<GetApiPemasukanTotalPemasukanPerTahunQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getApiPemasukanTotalPemasukanPerTahun(params, config)
    },
  })
}

/**
 * {@link /api/Pemasukan/total-pemasukan-per-tahun}
 */
export function useGetApiPemasukanTotalPemasukanPerTahun<
  TData = ResponseConfig<GetApiPemasukanTotalPemasukanPerTahunQueryResponse>,
  TQueryData = ResponseConfig<GetApiPemasukanTotalPemasukanPerTahunQueryResponse>,
  TQueryKey extends QueryKey = GetApiPemasukanTotalPemasukanPerTahunQueryKey,
>(
  params?: GetApiPemasukanTotalPemasukanPerTahunQueryParams,
  options: {
    query?: Partial<
      QueryObserverOptions<ResponseConfig<GetApiPemasukanTotalPemasukanPerTahunQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getApiPemasukanTotalPemasukanPerTahunQueryKey(params)

  const query = useQuery(
    {
      ...(getApiPemasukanTotalPemasukanPerTahunQueryOptions(params, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}