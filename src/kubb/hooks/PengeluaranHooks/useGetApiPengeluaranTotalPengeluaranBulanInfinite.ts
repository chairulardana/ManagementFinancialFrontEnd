/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@/config/axiosClient.ts'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@/config/axiosClient.ts'
import type {
  GetApiPengeluaranTotalPengeluaranBulanQueryResponse,
  GetApiPengeluaranTotalPengeluaranBulanQueryParams,
} from '../../types/PengeluaranController/GetApiPengeluaranTotalPengeluaranBulan.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const getApiPengeluaranTotalPengeluaranBulanInfiniteQueryKey = (params?: GetApiPengeluaranTotalPengeluaranBulanQueryParams) =>
  [{ url: '/api/Pengeluaran/total-pengeluaran-bulan' }, ...(params ? [params] : [])] as const

export type GetApiPengeluaranTotalPengeluaranBulanInfiniteQueryKey = ReturnType<typeof getApiPengeluaranTotalPengeluaranBulanInfiniteQueryKey>

/**
 * {@link /api/Pengeluaran/total-pengeluaran-bulan}
 */
export async function getApiPengeluaranTotalPengeluaranBulanInfinite(
  params?: GetApiPengeluaranTotalPengeluaranBulanQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetApiPengeluaranTotalPengeluaranBulanQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/api/Pengeluaran/total-pengeluaran-bulan`,
    params,
    ...requestConfig,
  })
  return res
}

export function getApiPengeluaranTotalPengeluaranBulanInfiniteQueryOptions(
  params?: GetApiPengeluaranTotalPengeluaranBulanQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getApiPengeluaranTotalPengeluaranBulanInfiniteQueryKey(params)
  return infiniteQueryOptions<
    ResponseConfig<GetApiPengeluaranTotalPengeluaranBulanQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<GetApiPengeluaranTotalPengeluaranBulanQueryResponse>,
    typeof queryKey,
    number
  >({
    queryKey,
    queryFn: async ({ signal, pageParam }) => {
      config.signal = signal

      if (params) {
        params['next_page'] = pageParam as unknown as GetApiPengeluaranTotalPengeluaranBulanQueryParams['next_page']
      }
      return getApiPengeluaranTotalPengeluaranBulanInfinite(params, config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['nextCursor'],
    getPreviousPageParam: (firstPage) => firstPage['nextCursor'],
  })
}

/**
 * {@link /api/Pengeluaran/total-pengeluaran-bulan}
 */
export function useGetApiPengeluaranTotalPengeluaranBulanInfinite<
  TData = InfiniteData<ResponseConfig<GetApiPengeluaranTotalPengeluaranBulanQueryResponse>>,
  TQueryData = ResponseConfig<GetApiPengeluaranTotalPengeluaranBulanQueryResponse>,
  TQueryKey extends QueryKey = GetApiPengeluaranTotalPengeluaranBulanInfiniteQueryKey,
>(
  params?: GetApiPengeluaranTotalPengeluaranBulanQueryParams,
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<ResponseConfig<GetApiPengeluaranTotalPengeluaranBulanQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryKey>
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getApiPengeluaranTotalPengeluaranBulanInfiniteQueryKey(params)

  const query = useInfiniteQuery(
    {
      ...(getApiPengeluaranTotalPengeluaranBulanInfiniteQueryOptions(params, config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}