/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@/config/axiosClient.ts'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '@/config/axiosClient.ts'
import type { PostApiPengeluaranMutationRequest, PostApiPengeluaranMutationResponse } from '../../types/PengeluaranController/PostApiPengeluaran.ts'
import { useMutation } from '@tanstack/react-query'

export const postApiPengeluaranMutationKey = () => [{ url: '/api/Pengeluaran' }] as const

export type PostApiPengeluaranMutationKey = ReturnType<typeof postApiPengeluaranMutationKey>

/**
 * {@link /api/Pengeluaran}
 */
export async function postApiPengeluaran(
  data?: PostApiPengeluaranMutationRequest,
  config: Partial<RequestConfig<PostApiPengeluaranMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<PostApiPengeluaranMutationResponse, ResponseErrorConfig<Error>, PostApiPengeluaranMutationRequest>({
    method: 'POST',
    url: `/api/Pengeluaran`,
    data,
    ...requestConfig,
    headers: { 'Content-Type': 'application/*+json', ...requestConfig.headers },
  })
  return res
}

/**
 * {@link /api/Pengeluaran}
 */
export function usePostApiPengeluaran<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<PostApiPengeluaranMutationResponse>,
      ResponseErrorConfig<Error>,
      { data?: PostApiPengeluaranMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<PostApiPengeluaranMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? postApiPengeluaranMutationKey()

  return useMutation<ResponseConfig<PostApiPengeluaranMutationResponse>, ResponseErrorConfig<Error>, { data?: PostApiPengeluaranMutationRequest }, TContext>(
    {
      mutationFn: async ({ data }) => {
        return postApiPengeluaran(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}