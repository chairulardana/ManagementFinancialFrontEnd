/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@/config/axiosClient.ts'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@/config/axiosClient.ts'
import type {
  GetApiPengeluaranTotalPengeluaranBulanQueryResponse,
  GetApiPengeluaranTotalPengeluaranBulanQueryParams,
} from '../../types/PengeluaranController/GetApiPengeluaranTotalPengeluaranBulan.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getApiPengeluaranTotalPengeluaranBulanSuspenseQueryKey = (params?: GetApiPengeluaranTotalPengeluaranBulanQueryParams) =>
  [{ url: '/api/Pengeluaran/total-pengeluaran-bulan' }, ...(params ? [params] : [])] as const

export type GetApiPengeluaranTotalPengeluaranBulanSuspenseQueryKey = ReturnType<typeof getApiPengeluaranTotalPengeluaranBulanSuspenseQueryKey>

/**
 * {@link /api/Pengeluaran/total-pengeluaran-bulan}
 */
export async function getApiPengeluaranTotalPengeluaranBulanSuspense(
  params?: GetApiPengeluaranTotalPengeluaranBulanQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetApiPengeluaranTotalPengeluaranBulanQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/api/Pengeluaran/total-pengeluaran-bulan`,
    params,
    ...requestConfig,
  })
  return res
}

export function getApiPengeluaranTotalPengeluaranBulanSuspenseQueryOptions(
  params?: GetApiPengeluaranTotalPengeluaranBulanQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getApiPengeluaranTotalPengeluaranBulanSuspenseQueryKey(params)
  return queryOptions<
    ResponseConfig<GetApiPengeluaranTotalPengeluaranBulanQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<GetApiPengeluaranTotalPengeluaranBulanQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getApiPengeluaranTotalPengeluaranBulanSuspense(params, config)
    },
  })
}

/**
 * {@link /api/Pengeluaran/total-pengeluaran-bulan}
 */
export function useGetApiPengeluaranTotalPengeluaranBulanSuspense<
  TData = ResponseConfig<GetApiPengeluaranTotalPengeluaranBulanQueryResponse>,
  TQueryKey extends QueryKey = GetApiPengeluaranTotalPengeluaranBulanSuspenseQueryKey,
>(
  params?: GetApiPengeluaranTotalPengeluaranBulanQueryParams,
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<ResponseConfig<GetApiPengeluaranTotalPengeluaranBulanQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryKey>
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getApiPengeluaranTotalPengeluaranBulanSuspenseQueryKey(params)

  const query = useSuspenseQuery(
    {
      ...(getApiPengeluaranTotalPengeluaranBulanSuspenseQueryOptions(params, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}